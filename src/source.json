{
    "complexitiesO":
        [
            {
                "symbol": "O(NlogN)",
                "examples":
                    [
                        {"name": "Mergesort",
                        "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/merge.gif"},
                        {"name": "Timsort",
                        "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/placeholderRectangle.png"},
                        {"name": "Heapsort",
                        "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/heap.gif"},
                        {"name": "Quicksort",
                        "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/quick.gif"}
                    ],
                "image": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/NlogN.png",
                "description": "NLOGN Description goes here",
                "rank": 6
            },
            {
                "symbol": "O(N^2)",
                "examples":
                    [
                        {"name": "Bubble sort",
                         "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/bubble.gif",
                         "description": "The simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order. This algorithm is not suitable for large data sets as its average and worst-case time complexity is quite high."},
                         {"name": "Insertion sort",
                         "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/insertion.gif"},
                        {"name": "Selection sort",
                         "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/selection.gif"},
                        {"name": "Tree sort",
                         "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/tree.gif"},
                        {"name": "Bucket Sort",
                         "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/bucket.gif"}
                    ],
                "image": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/N2.png",
                "description": "Quadratic time complexity. Often reflects the fact that the algorithm processes all (or a substantial number of) pairs of elements in a given input set. In the code it usually looks like a for loop embedded inside of another for loop. The examples are basic sorting algorithms like bubble, insertion or selection sort.",
                "resources": [],
                "rank": 8
            }, 
            {
                "symbol": "O(N(logN)^2)",
                "examples": 
                    [
                        {"name": "Shell sort",
                        "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/shell.gif"}
                    ],
                "image": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/NlogN2.png",
                "description": "NLOGN2 Description goes here",
                "rank": 7
            },
            {"symbol": "O(NK)",
            "examples": 
                [
                    {"name": "Radix sort",
                     "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/radix.gif",
                     "description": "Radix Sort is a linear sorting algorithm. Radix Sort's time complexity of O(nd), where n is the size of the array and d is the number of digits in the largest number. It is not an in-place sorting algorithm because it requires extra space. The time complexity of radix sort is O(n) because each digit is sorted independently. Some consider Radix sort to have a time complexity of O(N)."}
                ],
                "image": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/NK.png",
                "description": "NK Description goes here",
                 "rank": 5},
            {
                "symbol": "O(N+K)",
                "examples": 
                    [
                        {"name": "Counting sort",
                        "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/counting.gif"}
                    ],
                "image": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/NplusK.png",
                "description": "N+K Description goes here",
                "rank": 4},
            {
                "symbol": "O(N)",
                "examples": 
                    [],
                "image": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/N.png",
                "description": "As N increases, so does the amount of operations needed to complete the problem. This is simple to understand because itâ€™s an entirely linear relationship.",
                "rank": 3},
            {
                "symbol": "O(1)",
                "examples": 
                    [],
                "image": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/1.png",
                "description": "Constant time",
                "rank": 1
            },
            {
                "symbol": "O(2^N)",
                "examples": 
                    [],
                "image": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/2N.png",
                "description": "Worst time",
                "rank": 9
            },
            {
                "symbol": "O(log(N))",
                "examples": 
                    [
                        {
                            "name": "binary search",
                            "gif": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/binary.gif"
                        }
                    ],
                "image": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/logN.png",
                "description": "Good time",
                "rank": 2
            }

        ],
    "review-questions": {
        "basics": [
            {
            "question": "This should be an example of a __ type flashcard.",
            "answer": "Basic",
            "context": ""
            }
        ],
        "data structures": [
            {
                "image": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/minheap1.png",
                "question": "The following is a valid binary min heap. (T/F)",
                "answer": "True",
                "context": "In a Min Binary Heap, the key at the root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree."
            }
        ],
        "algorithms": [
            {
                "question": "Quick sort running time depends on the selection of the _ .",
                "answer": "pivot element",
                "context": "If the pivot element is balanced, quick sort running time will be less."
            },
            {
                "question": "An adaptive sorting algorithm takes advantage of _ elements.",
                "answer": "sorted"
            },
            {
                "question": "Which sorting algorithms maintain two sub-lists, one sorted and one to be sorted?",
                "answer": "Selection sort and insertion sort.",
                "context": "Both maintain two sublists and then check the unsorted list for next sorted element."
            }
        ],
        "complexities": [
            {
                "question": "This should be an example of a __ type flashcard.",
                "answer": "Complexities",
                "context": ""
            }
        ]
    },
    "tutorials": [
        {
            "title": "Example Tutorial Title 1",
            "level": "Introductory",
            "type": "Math Concept",
            "related": ["Short Title 2", "Example Title 4"],
            "body": [
                {
                    "position": 0,
                    "type": "n",
                    "content": "this is a quick blurb about example 1"
                },
                {
                    "position": 1,
                    "type": "h2",
                    "content": "This is a subheading of example 1"
                },
                {
                    "position": 2,
                    "type": "p",
                    "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin ut ultrices lorem. Curabitur luctus, massa in facilisis blandit, ex sem pellentesque urna, et iaculis tellus eros id nisi. Sed finibus tempus elit, in ullamcorper purus mattis in. Nulla at lectus eget nisl finibus convallis a eu leo. Integer tincidunt, diam ac tincidunt lobortis, nisi arcu aliquam velit, eget rutrum purus sem vitae mauris. Nunc ut dui mauris. In tempor auctor eros a condimentum. Aliquam augue mauris, tincidunt vel nulla ac, mollis malesuada orci. Donec nec ipsum neque. Quisque in rhoncus leo. Nam tincidunt hendrerit risus, sit amet viverra erat lobortis ut. Fusce est ex, faucibus semper felis id, faucibus tincidunt nunc. Vestibulum pretium ligula in sodales aliquet. Donec at hendrerit enim. Quisque justo urna, iaculis quis tincidunt non, condimentum eu metus."
                },
                {
                    "position": 3,
                    "type": "imageS",
                    "content": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/exampleDataImage1.jpg",
                    "note": "This is a note about the first image",
                    "desc": "description of image for accessibility"
                },
                {
                    "position": 4,
                    "type": "p",
                    "content": "Nunc nunc tellus, auctor et ipsum pharetra, feugiat imperdiet magna. Sed sollicitudin at nibh sed ultrices. Maecenas sagittis ut orci non tempus. In ac egestas mauris. Quisque lectus urna, commodo vitae lectus ut, venenatis volutpat sapien. Vestibulum aliquet enim pretium sapien commodo eleifend. Nulla non placerat velit. Curabitur nibh velit, convallis vel semper at, elementum faucibus dui. Proin eget tortor ornare, sodales tortor quis, eleifend ipsum. Aliquam tristique viverra consectetur. Phasellus ornare ante nec leo lacinia lobortis."
                },
                {
                    "position": 5,
                    "type": "h2",
                    "content": "Another subheading of example 1"
                },
                {
                    "position": 6,
                    "type": "imageL",
                    "content": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/exampleDataImage2.jpg",
                    "note": "This is a note about the second image",
                    "desc": "description of image for accessibility"
                },
                {
                    "position": 7,
                    "type": "n",
                    "content": "this is a quick blurb about the above image."
                },
                {
                    "position": 8,
                    "type": "p",
                    "content": "Mauris orci ante, fringilla quis dapibus et, feugiat in nisl. Integer fermentum et ante vel porta. Praesent orci velit, rutrum eu libero at, efficitur interdum neque."
                }
             ]
         },
         {
             "title": "Short Title 2",
             "level": "Introductory",
             "type": "Data Struture",
             "related": ["Example Tutorial Title 1"],
             "body": [
                 {
                    "position": 0,
                    "type": "n",
                    "content": "this is a quick blurb about example 2"
                },
                {
                    "position": 1,
                    "type": "h2",
                    "content": "this is a subheading of example 2"
                },
                {
                    "position": 2,
                    "type": "p",
                    "content": "this is paragraph 1 of example 2"
                },
                {
                    "position": 3,
                    "type": "imageM",
                    "content": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/exampleDataImage3.jpg",
                    "note": "This is a note about the first image",
                    "desc": "description of image for accessibility"
                },
                {
                    "position": 4,
                    "type": "p",
                    "content": "this is paragraph 1 of example 2"
                },
                {
                    "position": 5,
                    "type": "code",
                    "content": "for (let i = 0; i < 10; i++) {n>    if (i === 3) { break; }n>   text += 'The number is ' + i + '<br>';n>}"
                },
                {
                    "position": 6,
                    "type": "p",
                    "content": "this is paragraph 1 of example 2"
                }
             ]
         },
        {
            "title": "Example Tutorial Title 3",
            "level": "Novice",
            "type": "Sorting Algorithm",
            "related": ["Example Tutorial Title 1", "Example Title 4"],
            "body": [
                {
                   "position": 0,
                   "type": "n",
                   "content": "this is a quick blurb about example 3"
               },
               {
                   "position": 1,
                   "type": "h2",
                   "content": "this is a subheading of example 3"
               },
               {
                   "position": 2,
                   "type": "p",
                   "content": "this is paragraph 1 of example 3"
               },
               {
                   "position": 4,
                   "type": "imageM",
                   "content": "https://complexity-helper-first.s3.us-west-1.amazonaws.com/exampleDataImage2.jpg",
                   "note": "This is a note about the first image",
                   "desc": "description of image for accessibility"
               },
               {
                   "position": 3,
                   "type": "code",
                   "content": "this is code"
               }
            ]
        },
        {
            "title": "Example Title 4",
            "level": "Novice",
            "type": "Search Algorithm",
            "related": ["Example Tutorial Title 1", "Example Tutorial Title 3"],
            "body": [
                {
                   "position": 0,
                   "type": "n",
                   "content": "this is a quick blurb about example 4"
               }
            ]
        },
        {
            "title": "Tutorial Title 5",
            "level": "Intermediate",
            "type": "Search Algorithm",
            "related": ["Short Title 2", "Example Tutorial Title 3"],
            "body": [
                {
                   "position": 0,
                   "type": "n",
                   "content": "this is a quick blurb about example 5"
               }
            ]
        },
        {
            "title": "Example Tutorial Data 6",
            "level": "Advanced",
            "type": "Sorting Algorithm",
            "related": ["Example Tutorial Title 1"],
            "body": [
                {
                   "position": 0,
                   "type": "n",
                   "content": "this is a quick blurb about example 6"
               }
            ]
        },
        {
            "title": "Example Tutorial Data 7",
            "level": "Advanced",
            "type": "Coding Concept",
            "related": ["Example Tutorial Title 1", "Example Title 4", "Tutorial Title 5", "Example Tutorial Data 6"],
            "body": [
                {
                   "position": 0,
                   "type": "n",
                   "content": "this is a quick blurb about example 7"
               }
            ]
        },
        {
            "title": "Example Tutorial Data 8",
            "level": "Advanced",
            "type": "Coding Concept",
            "related": [],
            "body": [
                {
                   "position": 0,
                   "type": "n",
                   "content": "this is a quick blurb about example 7"
               }
            ]
        },
        {
            "title": "Example Tutorial Data 9",
            "level": "Advanced",
            "type": "Coding Concept",
            "related": [],
            "body": [
                {
                   "position": 0,
                   "type": "n",
                   "content": "this is a quick blurb about example 7"
               }
            ]
        },
        {
            "title": "Example Tutorial Data 10",
            "level": "Advanced",
            "type": "Coding Concept",
            "related": ["Example Tutorial Title 1", "Example Title 4", "Tutorial Title 5", "Example Tutorial Data 6"],
            "body": [
                {
                   "position": 0,
                   "type": "n",
                   "content": "this is a quick blurb about example 7"
               }
            ]
        },
        {
            "title": "Example Tutorial Data 11",
            "level": "Advanced",
            "type": "Coding Concept",
            "related": ["Example Tutorial Title 1", "Example Title 4", "Tutorial Title 5", "Example Tutorial Data 6"],
            "body": [
                {
                   "position": 0,
                   "type": "n",
                   "content": "this is a quick blurb about example 7"
               }
            ]
        }
    ],
    "filteringOptions": {
        "levels" : ["Introductory", "Novice", "Intermediate", "Advanced"],
        "types": ["Math Concept", "Coding Concept", "Data Struture", "Search Algorithm", "Sorting Algorithm"]
    },
    "exercises": [
        {
            "type": "Complete the Code",
            "level": "Introductory",
            "category": "category 1",
            "question": "This could be an n>    example of code that n>        has a _> word n>   and the answer n>is 'missing'",
            "answers":["missing"],
            "status": "",
            "prompt": "Theres is an empty input field. Fill it in with 'missing' and click submit.",
            "hint": "answer missing"
        },
        {
            "type": "Complete the Code",
            "level": "Introductory",
            "category": "category 1",
            "question": "This could be an n>    example of _> that n>        has a _> word n>   and the answers n>are 'code' and 'missing'",
            "answers":["code", "missing"],
            "status": "",
            "prompt": "type in missing"
        },
        {
            "type": "Complete the Code",
            "level": "Introductory",
            "category": "category 1",
            "question": "This2 could2 be2 an2 n>    example2 of2 _> that2 n>        has2 a2 _> word2 n>   and2 the2 answers2 n>are2 'code2' and2 'missing2'",
            "answers":["code2", "missing2"],
            "status": "",
            "prompt": "type in missing"
        },
        {
            "type": "Complete the Code",
            "level": "Introductory",
            "category": "category 2",
            "question": "This3 could3 be3 an3 n>    example3 of3 code3 that3 n>        has3 a3 _> word3 n>   and3 the3 answers3 n>are3 'missing3'",
            "answers":["missing3"],
            "status": ""
        },
        {
            "type": "Complete the Code",
            "level": "Novice",
            "category": "category 1",
            "question": "This2 could2 be2 an2 n>    example2 of2 _> that2 n>        has2 a2 _> word2 n>   and2 the2 answers2 n>are2 'code2' and2 'missing2'",
            "answers":["code2", "missing2"],
            "status": ""
        },
        {
            "type": "Multiple Choice",
            "level": "Novice",
            "category": "category 1",
            "question": "This2 could2 be2 an2 n>    example2 of2 code2 that2 n>        does not have2 a2 _> missing2 word2 n>   and2 the2 answers2 n>are2 'code2' and2 'missing2'",
            "answers":["a1", "b2", "sssss sssssssssssssssssssssssssssssssssssssssss", "d4"],
            "correct": "a1",
            "status": "",
            "prompt": "Select a1"
        },
        {
            "type": "Short Answer",
            "level": "Novice",
            "category": "category 1",
            "prompt": "What is 2 x 2 ?",
            "correct": "4",
            "status": "",
            "hint": "4",
            "answers": ""
        },
        {
            "type": "Short Answer",
            "level": "Novice",
            "category": "category 1",
            "prompt": "What is 2 x 2 ?",
            "correct": "4",
            "status": "",
            "answers": ""
        }
    ],
    "exerciseOptions": {
        "difficulty": [
            "Introductory", "Novice"
        ],
        "category": [
            "category 1", "category 2"
        ],
        "type": [
            "Complete the Code", "Multiple Choice", "Short Answer"
        ]
    }
}
